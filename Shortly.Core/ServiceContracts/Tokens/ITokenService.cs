using Shortly.Core.DTOs.AuthDTOs;
using Shortly.Core.Exceptions.ClientErrors;
using Shortly.Domain.Entities;

namespace Shortly.Core.ServiceContracts.Tokens;

/// <summary>
/// Defines methods for generating, validating, and revoking access and refresh tokens.
/// </summary>
public interface ITokenService
{
    /// <summary>
    /// Generates a new access and refresh token pair for the specified user.
    /// </summary>
    /// <param name="user">The user to generate tokens for.</param>
    /// <returns>A <see cref="TokenResponse"/> containing token data.</returns>
    Task<TokenResponse> GenerateTokensAsync(User user);

    /// <summary>
    /// Refreshes the token pair using a valid refresh token.
    /// </summary>
    /// <param name="refreshToken">The refresh token to use for generating new tokens.</param>
    /// <returns>A new <see cref="TokenResponse"/> if successful; otherwise, null.</returns>
    /// <exception cref="UnauthorizedException">Thrown if the token is invalid, expired, or inactive.</exception>
    Task<TokenResponse?> RefreshTokenAsync(string refreshToken);

    /// <summary>
    /// Validates a given JWT token and returns the result.
    /// </summary>
    /// <param name="token">The JWT token to validate.</param>
    /// <param name="validateLifetime">Whether to validate token expiration.</param>
    /// <returns>A <see cref="TokenValidationResultDto"/> indicating validation status.</returns>
    TokenValidationResultDto ValidateToken(string token, bool validateLifetime = true);

    /// <summary>
    /// Revokes a specific refresh token if it is active.
    /// </summary>
    /// <param name="refreshToken">The refresh token to revoke.</param>
    /// <param name="cancellationToken"></param>
    Task<bool> RevokeTokenAsync(string refreshToken, CancellationToken cancellationToken = default);

    /// <summary>
    /// Revokes all active refresh tokens for a given user.
    /// </summary>
    /// <param name="userId">The ID of the user whose tokens should be revoked.</param>
    /// <param name="cancellationToken"></param>
    Task<bool> RevokeAllUserTokensAsync(Guid userId, CancellationToken cancellationToken = default);
    
    /// <summary>
    /// Generates a short-lived JSON Web Token (JWT) specifically for redirect URL access.
    /// </summary>
    /// <param name="shortCode"> The unique short code that identifies the shortened URL.</param>
    /// <param name="lifetime">The amount of time before the token expires.  
    /// This should generally be very short (e.g., 5 minutes) to reduce the risk of token reuse.
    /// </param>
    /// <returns>
    /// A signed JWT string containing the <c>shortCode</c> and a claim indicating its <c>type</c> is <c>redirect</c>.
    /// </returns>
    /// <remarks>
    /// This method is intended to be used when a password-protected short URL requires
    /// temporary access via a token. It is NOT intended for user authentication.
    /// </remarks>
    /// <example>
    /// <code>
    /// var token = tokenService.GenerateRedirectToken("abc123", TimeSpan.FromMinutes(5));
    /// </code>
    /// </example>
    /// <exception cref="InvalidOperationException"> Thrown if the signing key is not found in the configuration.</exception>
    string GenerateRedirectToken(string shortCode, TimeSpan lifetime);

    /// <summary>
    /// Validates a redirect token and extracts the short code if the token is valid.
    /// </summary>
    /// <param name="token">
    /// The JWT string generated by <see cref="GenerateRedirectToken"/>.
    /// </param>
    /// <returns>
    /// The short code embedded in the token if valid; otherwise, <c>null</c>.
    /// </returns>
    /// <remarks>
    /// This method will reject:
    /// - Tokens with invalid signatures  
    /// - Tokens that have expired  
    /// - Tokens missing the <c>shortCode</c> claim
    /// </remarks>
    /// <example>
    /// <code>
    /// var shortCode = tokenService.ValidateRedirectToken(token);
    /// if (shortCode != null)
    /// {
    ///     // Token is valid, proceed with redirect
    /// }
    /// else
    /// {
    ///     // Token is invalid or expired
    /// }
    /// </code>
    /// </example>
    public string? ValidateRedirectToken(string token);
}