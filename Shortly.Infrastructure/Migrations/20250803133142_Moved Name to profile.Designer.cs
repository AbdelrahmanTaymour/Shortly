// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shortly.Infrastructure.DbContexts;

#nullable disable

namespace Shortly.Infrastructure.Migrations
{
    [DbContext(typeof(SQLServerDbContext))]
    [Migration("20250803133142_Moved Name to profile")]
    partial class MovedNametoprofile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shortly.Domain.Entities.ClickEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("ClickedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Referrer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferrerDomain")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<long>("ShortUrlId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrafficSource")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UtmCampaign")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UtmContent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UtmMedium")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UtmSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UtmTerm")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ShortUrlId");

                    b.HasIndex("ShortUrlId", "ClickedAt");

                    b.HasIndex("ShortUrlId", "Country");

                    b.HasIndex("ShortUrlId", "DeviceType");

                    b.HasIndex("ShortUrlId", "TrafficSource");

                    b.ToTable("ClickEvents");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSubscribed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MemberLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("OwnerId");

                    b.HasIndex("IsActive", "DeletedAt");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Event")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TargetEntity")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TargetId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationId", "TimeStamp");

                    b.ToTable("OrganizationAuditLogs");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("DATEADD(day, 5, GETUTCDATE())");

                    b.Property<string>("InvitationToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid>("InvitedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InvitedUserEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CASE WHEN [ExpiresAt] < GETUTCDATE() THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("InvitationToken")
                        .IsUnique();

                    b.HasIndex("InvitedBy");

                    b.HasIndex("OrganizationId", "InvitedUserEmail", "Status");

                    b.ToTable("OrganizationInvitations");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CustomPermissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<Guid>("InvitedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)2);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("OrganizationId", "IsActive");

                    b.HasIndex("OrganizationId", "UserId")
                        .IsUnique();

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamManagerId");

                    b.HasIndex("OrganizationId", "Name")
                        .IsUnique();

                    b.ToTable("OrganizationTeams");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId", "MemberId")
                        .IsUnique();

                    b.ToTable("OrganizationTeamMembers");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TokenHash")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsRevoked", "ExpiresAt");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.Role", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<long>("DefaultPermissions")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            DefaultPermissions = 17716740224L,
                            Description = "Read-only access to resources.",
                            RoleName = "Viewer"
                        },
                        new
                        {
                            Id = (byte)2,
                            DefaultPermissions = 33822900479L,
                            Description = "Can manage and track their own content.",
                            RoleName = "Member"
                        },
                        new
                        {
                            Id = (byte)3,
                            DefaultPermissions = 33824964607L,
                            Description = "Can manage their team and content.",
                            RoleName = "TeamManager"
                        },
                        new
                        {
                            Id = (byte)4,
                            DefaultPermissions = 13193611051007L,
                            Description = "Can manage users and settings for the organization.",
                            RoleName = "OrgAdmin"
                        },
                        new
                        {
                            Id = (byte)5,
                            DefaultPermissions = -562949953421313L,
                            Description = "Owns the organization with full control.",
                            RoleName = "OrgOwner"
                        },
                        new
                        {
                            Id = (byte)6,
                            DefaultPermissions = -562949953421313L,
                            Description = "Platform-wide admin access.",
                            RoleName = "PlatformAdmin"
                        },
                        new
                        {
                            Id = (byte)7,
                            DefaultPermissions = -1L,
                            Description = "System-wide root access.",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("Shortly.Domain.Entities.ShortUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AnonymousIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("AnonymousSessionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ClickLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedByMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPasswordProtected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<byte>("OwnerType")
                        .HasColumnType("tinyint");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("TrackingEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByMemberId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ShortCode")
                        .IsUnique()
                        .HasFilter("[ShortCode] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("IsActive", "ExpiresAt");

                    b.HasIndex("OwnerType", "AnonymousSessionId");

                    b.ToTable("ShortUrls", t =>
                        {
                            t.HasCheckConstraint("CK_ShortUrls_CreatedByMember", "(\n            -- If OrganizationId is set, CreatedByMemberId should be set\n            ([OrganizationId] IS NOT NULL AND [CreatedByMemberId] IS NOT NULL)\n            OR\n            -- If OrganizationId is null, CreatedByMemberId should be null\n            ([OrganizationId] IS NULL AND [CreatedByMemberId] IS NULL)\n        )");

                            t.HasCheckConstraint("CK_ShortUrls_SingleOwner", "(\n            -- User owned: OwnerType = 1, UserId is set, OrganizationId is null, no anonymous fields\n            ([OwnerType] = 1 AND [UserId] IS NOT NULL AND [OrganizationId] IS NULL AND [AnonymousSessionId] IS NULL AND [AnonymousIpAddress] IS NULL)\n            OR\n            -- Organization owned: OwnerType = 2, OrganizationId is set, UserId is null, no anonymous fields  \n            ([OwnerType] = 2 AND [OrganizationId] IS NOT NULL AND [UserId] IS NULL AND [AnonymousSessionId] IS NULL AND [AnonymousIpAddress] IS NULL)\n            OR\n            -- Anonymous owned: OwnerType = 3, Both UserId and OrganizationId are null, anonymous fields can be set\n            ([OwnerType] = 3 AND [UserId] IS NULL AND [OrganizationId] IS NULL)\n        )");
                        });
                });

            modelBuilder.Entity("Shortly.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<bool>("BulkCreation")
                        .HasColumnType("bit");

                    b.Property<bool>("CampaignTracking")
                        .HasColumnType("bit");

                    b.Property<int>("ClickDataRetentionDays")
                        .HasColumnType("int");

                    b.Property<bool>("CustomShortCode")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("GeoDeviceTracking")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkAnalysis")
                        .HasColumnType("bit");

                    b.Property<bool>("LinkProtection")
                        .HasColumnType("bit");

                    b.Property<int>("MaxLinksPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MaxQrCodesPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            BulkCreation = false,
                            CampaignTracking = false,
                            ClickDataRetentionDays = 0,
                            CustomShortCode = false,
                            Description = "Try it out for free",
                            GeoDeviceTracking = false,
                            LinkAnalysis = false,
                            LinkProtection = false,
                            MaxLinksPerMonth = 5,
                            MaxQrCodesPerMonth = 2,
                            Name = "Free",
                            Price = 0m
                        },
                        new
                        {
                            Id = (byte)2,
                            BulkCreation = false,
                            CampaignTracking = false,
                            ClickDataRetentionDays = 30,
                            CustomShortCode = true,
                            Description = "Unlock powerful data",
                            GeoDeviceTracking = false,
                            LinkAnalysis = true,
                            LinkProtection = false,
                            MaxLinksPerMonth = 100,
                            MaxQrCodesPerMonth = 5,
                            Name = "Starter",
                            Price = 10m
                        },
                        new
                        {
                            Id = (byte)3,
                            BulkCreation = true,
                            CampaignTracking = false,
                            ClickDataRetentionDays = 120,
                            CustomShortCode = true,
                            Description = "Create memorable brand experiences",
                            GeoDeviceTracking = false,
                            LinkAnalysis = true,
                            LinkProtection = true,
                            MaxLinksPerMonth = 500,
                            MaxQrCodesPerMonth = 10,
                            Name = "Professional",
                            Price = 50m
                        },
                        new
                        {
                            Id = (byte)4,
                            BulkCreation = true,
                            CampaignTracking = true,
                            ClickDataRetentionDays = 365,
                            CustomShortCode = true,
                            Description = "Track your brand in depth",
                            GeoDeviceTracking = true,
                            LinkAnalysis = true,
                            LinkProtection = true,
                            MaxLinksPerMonth = 3000,
                            MaxQrCodesPerMonth = 200,
                            Name = "Enterprise",
                            Price = 200m
                        });
                });

            modelBuilder.Entity("Shortly.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<long>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(15L);

                    b.Property<byte>("SubscriptionPlanId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("IsDeleted", "IsActive");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TimeStamp");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "TimeStamp");

                    b.ToTable("UserAuditLogs");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserSecurity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("UserId");

                    b.HasIndex("PasswordResetToken");

                    b.ToTable("UserSecurity");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserUsage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MonthlyLinksCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MonthlyQrCodesCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("MonthlyResetDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("DATEADD(month, 1, GETUTCDATE())");

                    b.Property<int>("TotalLinksCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalQrCodesCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserId");

                    b.ToTable("UserUsage");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.ClickEvent", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.ShortUrl", "ShortUrl")
                        .WithMany("ClickEvents")
                        .HasForeignKey("ShortUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShortUrl");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationAuditLog", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.OrganizationMember", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Shortly.Domain.Entities.Organization", "Organization")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationInvitation", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.OrganizationMember", "InvitedByMember")
                        .WithMany()
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shortly.Domain.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedByMember");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationMember", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shortly.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithMany("OrganizationMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationTeam", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.Organization", "Organization")
                        .WithMany("Teams")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shortly.Domain.Entities.OrganizationMember", "TeamManager")
                        .WithMany()
                        .HasForeignKey("TeamManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("TeamManager");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationTeamMember", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.OrganizationMember", "Member")
                        .WithMany("JoinedTeams")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Shortly.Domain.Entities.OrganizationTeam", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.ShortUrl", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.OrganizationMember", "CreatedBy")
                        .WithMany("CreatedShortUrls")
                        .HasForeignKey("CreatedByMemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Shortly.Domain.Entities.Organization", "Organization")
                        .WithMany("ShortUrls")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithMany("OwnedShortUrls")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.User", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserAuditLog", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Shortly.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserSecurity", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithOne("UserSecurity")
                        .HasForeignKey("Shortly.Domain.Entities.UserSecurity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.UserUsage", b =>
                {
                    b.HasOne("Shortly.Domain.Entities.User", "User")
                        .WithOne("UserUsage")
                        .HasForeignKey("Shortly.Domain.Entities.UserUsage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.Organization", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Members");

                    b.Navigation("ShortUrls");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationMember", b =>
                {
                    b.Navigation("CreatedShortUrls");

                    b.Navigation("JoinedTeams");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.OrganizationTeam", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.ShortUrl", b =>
                {
                    b.Navigation("ClickEvents");
                });

            modelBuilder.Entity("Shortly.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("OrganizationMemberships");

                    b.Navigation("OwnedShortUrls");

                    b.Navigation("Profile");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserSecurity");

                    b.Navigation("UserUsage");
                });
#pragma warning restore 612, 618
        }
    }
}
