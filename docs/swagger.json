{
  "openapi": "3.0.4",
  "info": {
    "title": "Shortly API",
    "description": "API documentation for the Link Management System",
    "version": "v1"
  },
  "paths": {
    "/api/auth/send-email-verification": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Sends an email verification link to the specified or current user's email address.",
        "description": "\n<strong>Access:</strong> This endpoint can be used by both authenticated and unauthenticated users.\n\nIf the user is authenticated and no email is provided in the request, the current user's email will be used.\n\nA new verification token is generated, and any existing tokens are invalidated for security.\n            \n            Sample request:\n            \n                POST /api/auth/send-email-verification\n                {\n                    \"email\": \"user@example.com\"\n                }\n            \n            Sample response:\n            \n                {\n                    \"emailSent\": true,\n                    \"message\": \"Verification email sent successfully.\"\n                }",
        "operationId": "SendEmailVerification",
        "requestBody": {
          "description": "The request containing the email address (optional if user is authenticated).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailVerificationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email was queued successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendEmailVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to send verification email.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No user was found with the specified email address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "The email address is already verified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify-email": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Verifies a user's email address using the provided verification token and returns authentication details.",
        "description": "This endpoint completes the email verification process by validating and consuming the token,\nmarking the user's email as confirmed, and providing authentication tokens for immediate login.\n\nSample request:\n\n    POST /api/auth/verify-email\n    {\n        \"token\": \"encrypted_verification_token_from_email\"\n    }\n\nSample response:\n\n    {\n        \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n        \"email\": \"user@example.com\",\n        \"tokens\": {\n            \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpJVCL9...\",\n            \"refreshToken\": \"refresh_token_here\",\n            \"expiresAt\": \"2024-12-31T23:59:59Z\"\n        },\n        \"success\": true,\n        \"requiresEmailConfirmation\": false\n    }",
        "operationId": "VerifyEmail",
        "requestBody": {
          "description": "The request containing the encrypted verification token from the email link.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email was verified successfully and authentication tokens are provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Verification token is not found or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Token has already been used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-email": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Initiates an email change process by validating the current password and sending a confirmation email to the new address.",
        "description": "\n<strong>Authentication Required:</strong> User must be authenticated to change their email address.\n\nThis endpoint begins a two-step email change process for security:\n<list type=\"number\">\n  <item>\n    <description>Validates the user's current password</description>\n  </item>\n  <item>\n    <description>Checks that the new email isn't already in use</description>\n  </item>\n  <item>\n    <description>Sends a confirmation link to the NEW email address</description>\n  </item>\n</list>\n\nThe email change is not completed until the user clicks the confirmation link sent to the new email address.\n            \n            Sample request:\n            \n                POST /api/auth/change-email\n                {\n                    \"newEmail\": \"newemail@example.com\",\n                    \"password\": \"current_user_password\"\n                }\n            \n            Sample response:\n            \n                {\n                    \"success\": true,\n                    \"message\": \"Email change confirmation sent to your new email address.\"\n                }",
        "operationId": "ChangeEmail",
        "requestBody": {
          "description": "The request containing the new email address and current password for verification.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email change process was initiated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailChangeResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to change email.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Current user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "The new email address is already in use by another user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/confirm-email-change": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Completes the email change process by validating the confirmation token and updating the user's email address.",
        "description": "This endpoint completes the two-step email change verification process. It validates the confirmation token,\nperforms a final check that the new email is still available, and updates the user's email address.\n\nThe confirmation token is consumed during this process and cannot be reused.\n\nSample request:\n\n    POST /api/auth/confirm-email-change\n    {\n        \"token\": \"encrypted_confirmation_token_from_email\"\n    }\n\nSample response:\n\n    {\n        \"success\": true,\n        \"message\": \"Email address updated successfully.\"\n    }",
        "operationId": "ConfirmEmailChange",
        "requestBody": {
          "description": "The request containing the encrypted confirmation token from the email change confirmation link.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailChangeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailChangeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmEmailChangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email address was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailChangeResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Confirmation token isn't found or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "The new email address is already in use (double-check protection).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/forgot-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Initiates the password reset process by sending a password reset link to the user's email address.",
        "description": "\n<strong>Security:</strong> This endpoint implements anti-enumeration protection by always returning success,\n            regardless of whether the email address exists in the system.\n\nIf the email address exists and the user is active:\n<list type=\"bullet\">\n  <item>\n    <description>A password reset token is generated</description>\n  </item>\n  <item>\n    <description>A reset email is queued for sending</description>\n  </item>\n  <item>\n    <description>The token has a shorter expiration time for enhanced security</description>\n  </item>\n</list>\n\nIf the email doesn't exist or the user is inactive/deleted, no email is sent,\n            but the response is identical to prevent attackers from discovering valid email addresses.\n            \n            Sample request:\n            \n                POST /api/auth/forgot-password\n                {\n                    \"email\": \"user@example.com\"\n                }\n            \n            Sample response:\n            \n                {\n                    \"success\": true,\n                    \"message\": \"If the email address exists, a password reset link has been sent.\"\n                }",
        "operationId": "ForgotPassword",
        "requestBody": {
          "description": "The request containing the email address for password reset.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset process was initiated (always returned to prevent user enumeration).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOperationResponse"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/validate-reset-token": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Validates a password reset token without consuming it to check if it's valid for password reset.",
        "description": "This endpoint is typically used by frontend applications to validate reset tokens before \npresenting the password reset form to users. It performs comprehensive validation including\nexistence, expiration, and usage checks without consuming the token.\n\nThis allows users to refresh the page or navigate away from the reset form without \ninvalidating their reset link.\n\nSample request:\n\n    POST /api/auth/validate-reset-token\n    {\n        \"token\": \"encrypted_reset_token_from_email\"\n    }\n\nSample response:\n\n    {\n        \"isValid\": true,\n        \"message\": \"Token is valid.\"\n    }",
        "operationId": "ValidateResetToken",
        "requestBody": {
          "description": "The request containing the encrypted password reset token to validate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateResetTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateResetTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateResetTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns whether the token is valid or not.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateTokenResponse"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resets a user's password using a valid password reset token and revokes all existing user sessions.",
        "description": "This endpoint performs a complete password reset process:\n<list type=\"number\"><item><description>Validates and consumes the reset token (marks it as used)</description></item><item><description>Updates the user's password with proper security hashing</description></item><item><description>Revokes all existing user sessions for security</description></item></list>\n\nAfter a successful password reset, the user will need to log in again with their new password.\nThe reset token cannot be reused once consumed.\n\nSample request:\n\n    POST /api/auth/reset-password\n    {\n        \"token\": \"encrypted_reset_token_from_email\",\n        \"newPassword\": \"new_secure_password_123!\"\n    }\n\nSample response:\n\n    {\n        \"success\": true,\n        \"message\": \"Password reset successfully. Please log in with your new password.\"\n    }",
        "operationId": "ResetPassword",
        "requestBody": {
          "description": "The request containing the encrypted reset token and new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password was reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Reset token is not found or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Token has already been used.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "503": {
            "description": "The password update service is temporarily unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Changes an authenticated user's password after validating their current password and revokes all existing sessions.",
        "description": "\n<strong>Authentication Required:</strong> User must be authenticated to change their password.\n\nThis endpoint is used for authenticated password changes (as opposed to password resets via email).\n            It requires the user to provide their current password for security verification.\n\nSecurity measures implemented:\n<list type=\"bullet\">\n  <item>\n    <description>Current password validation before allowing change</description>\n  </item>\n  <item>\n    <description>All user sessions are revoked after a successful password change</description>\n  </item>\n  <item>\n    <description>User must re-authenticate with the new password</description>\n  </item>\n</list>\n\nThis prevents session hijacking if the password change was initiated due to a security concern.\n            \n            Sample request:\n            \n                POST /api/auth/change-password\n                {\n                    \"currentPassword\": \"old_password_123\",\n                    \"newPassword\": \"new_secure_password_456!\",\n                    \"confirmPassword\": \"new_secure_password_456!\"\n                }\n            \n            Sample response:\n            \n                {\n                    \"success\": true,\n                    \"message\": \"Password changed successfully. All sessions have been logged out.\"\n                }",
        "operationId": "ChangePassword",
        "requestBody": {
          "description": "The request containing the current password for verification and the new password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password was changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated or the current password is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Current user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "503": {
            "description": "The password update service is temporarily unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/search/basic": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Searches for users and returns basic information with pagination support.",
        "operationId": "SearchBasicUsers",
        "parameters": [
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SubscriptionPlan",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/enSubscriptionPlan"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsEmailConfirmed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the paginated search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicUserSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to view all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/search/complete": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Searches for users and returns complete information including profile, security, and usage data.",
        "description": "This endpoint returns comprehensive user data and should be used when detailed information is required.\nFor better performance with large datasets, consider using the basic search endpoint instead.",
        "operationId": "SearchCompleteUsers",
        "parameters": [
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SubscriptionPlan",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/enSubscriptionPlan"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsEmailConfirmed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the complete paginated search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteUserSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid search parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to view all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/force-update/{userId}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Forces an update on a specific user, bypassing normal validation rules.",
        "description": "This is a privileged operation that bypasses standard validation rules. Use with caution as it can override system\nconstraints. All operations are logged for audit purposes.",
        "operationId": "ForceUpdateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The force update request containing the changes to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForceUpdateUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForceUpdateUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForceUpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForceUpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID or update request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to update users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/hard-delete/{userId}": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Permanently deletes a user and all associated data from the system.",
        "description": "WARNING: This operation is irreversible and will permanently delete the user and all associated data. Consider\nusing soft delete instead unless permanent deletion is absolutely necessary.\nWhen deleteOwnedShortUrls is false, short URLs will be reassigned or made anonymous. When true, they will be\npermanently deleted.\nExample usage: DELETE /api/admin/users/hard-delete/12345678-1234-1234-1234-123456789012?deleteOwnedShortUrls=true",
        "operationId": "HardDeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteOwnedShortUrls",
            "in": "query",
            "description": "Whether to delete short URLs owned by the user (default: false)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "400": {
            "description": "Invalid user ID provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to hard delete users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/bulk-activate": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Activates multiple users in a single batch operation.",
        "description": "This operation will attempt to activate all provided users. The response will include details about successful and\nfailed operations. Partial success is possible - some users may be activated while others fail.",
        "operationId": "BulkActivateUsers",
        "requestBody": {
          "description": "Collection of user IDs to activate",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk operation completed with results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user IDs or empty collection provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to activate users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/bulk-deactivate": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Deactivates multiple users in a single batch operation.",
        "description": "This operation will attempt to deactivate all provided users. Deactivated users will lose access to the system, but\ntheir data will be preserved. The response includes details about successful and failed operations.",
        "operationId": "BulkDeactivateUsers",
        "requestBody": {
          "description": "Collection of user IDs to deactivate",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk operation completed with results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user IDs or empty collection provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to deactivate users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin/users/bulk-delete": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Soft deletes multiple users in a single batch operation.",
        "description": "This operation performs soft deletion, marking users as deleted while\npreserving their data for potential recovery. The operation is audited\nwith the current administrator's ID for accountability.\nUsers will be immediately inaccessible, but data can be recovered if needed.",
        "operationId": "BulkDeleteUsers",
        "requestBody": {
          "description": "Collection of user IDs to softly delete",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk operation completed with results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user IDs or empty collection provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to delete users or unable to determine current admin ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a new user account with email verification.",
        "description": "Creates a new user account and automatically sends an email verification link.\nThe user receives authentication tokens immediately, but email confirmation may be required\nfor certain features depending on the system configuration.\n\nSample request:\n\n    POST /api/auth/register\n    {\n        \"email\": \"user@example.com\",\n        \"username\": \"newuser123\",\n        \"password\": \"SecurePassword123!\"\n    }",
        "operationId": "Register",
        "requestBody": {
          "description": "The registration request containing user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was registered successfully and authentication tokens are provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authenticates a user with email/username and password credentials.",
        "description": "Validates user credentials and provides JWT access and refresh tokens for authenticated sessions.\n\nSample request:\n\n    POST /api/auth/login\n    {\n        \"emailOrUsername\": \"user@example.com\",\n        \"password\": \"UserPassword123!\"\n    }",
        "operationId": "Login",
        "requestBody": {
          "description": "The login request containing credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was authenticated successfully and tokens are provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "The credentials are invalid or the request is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes an expired access token using a valid refresh token.",
        "description": "Generates new authentication tokens when the access token has expired, but the refresh token is still valid.\nThe old refresh token is invalidated, and a new one is issued for security.\n\nSample request:\n\n    POST /api/auth/refresh-token\n    {\n        \"refreshToken\": \"base64_encoded_refresh_token\"\n    }",
        "operationId": "RefreshToken",
        "requestBody": {
          "description": "The request containing the refresh token.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New tokens were generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid or missing required data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "The refresh token is invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out the current user session by revoking the specified refresh token.",
        "description": "\n<strong>Authentication Required:</strong> User must be authenticated to logout.\n\nThis endpoint revokes a specific refresh token, effectively logging out the user from the current session/device.\n            The access token will continue to work until it expires naturally (typically within minutes),\n            but the refresh token becomes unusable immediately.\n\nFor complete immediate logout, the client should:\n<list type=\"number\">\n  <item>\n    <description>Call this endpoint to revoke the refresh token</description>\n  </item>\n  <item>\n    <description>Remove both access and refresh tokens from client storage</description>\n  </item>\n  <item>\n    <description>Redirect user to login page</description>\n  </item>\n</list>\n            \n            Sample request:\n            \n                POST /api/auth/logout\n                {\n                    \"refreshToken\": \"base64_encoded_refresh_token\"\n                }\n            \n            Sample response:\n            \n                {\n                    \"success\": true,\n                    \"message\": \"Logged out successfully.\"\n                }",
        "operationId": "Logout",
        "requestBody": {
          "description": "The logout request containing the refresh token to revoke.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was logged out successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid or missing required data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The specified refresh token was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout-all": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs out the user from all sessions by revoking all refresh tokens associated with their account.",
        "description": "\n<strong>Authentication Required:</strong> User must be authenticated to logout from all sessions.\n\nThis endpoint provides a security feature to revoke ALL refresh tokens associated with the current user,\n            effectively logging them out from all devices and sessions simultaneously.\n\nThis is useful in scenarios such as:\n<list type=\"bullet\">\n  <item>\n    <description>User suspects their account has been compromised</description>\n  </item>\n  <item>\n    <description>User wants to log out from all devices after a password change</description>\n  </item>\n  <item>\n    <description>User wants to revoke access from lost/stolen devices</description>\n  </item>\n  <item>\n    <description>Security maintenance operations</description>\n  </item>\n</list>\n\nAfter calling this endpoint:\n<list type=\"number\">\n  <item>\n    <description>All refresh tokens for the user are immediately revoked</description>\n  </item>\n  <item>\n    <description>Existing access tokens continue to work until natural expiration</description>\n  </item>\n  <item>\n    <description>User will need to re-authenticate on all devices/sessions</description>\n  </item>\n</list>\n            \n            Sample request:\n            \n                POST /api/auth/logout-all\n            \n            Sample response:\n            \n                {\n                    \"success\": true,\n                    \"message\": \"Successfully logged out from all sessions.\"\n                }",
        "operationId": "LogoutAll",
        "responses": {
          "200": {
            "description": "User was logged out from all sessions successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "User was not found or no active sessions to revoke.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/{shortUrlId}/click": {
      "post": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Tracks a click event for a specific short URL and returns the recorded click data.",
        "description": "**Access:** [AllowAnonymous] This endpoint is accessible to everyone to enable click tracking for all users.\n            \nSample Request:\n            \n    POST /api/urls/tracking/123456789/click\n            \nThis endpoint automatically captures and records comprehensive click analytics including:\n- **Geographic Information**: Country and city based on IP address\n- **Device Information**: Browser, operating system, device type\n- **Traffic Source**: Referrer domain and traffic source analysis\n- **UTM Parameters**: Campaign tracking parameters from query string\n- **Session Tracking**: Anonymous session identification\n- **Timestamp**: Precise click timing in UTC\n\n**Automatic Data Collection:**\nThe endpoint automatically extracts tracking data from the HTTP request:\n- IP address (with proxy support via X-Forwarded-For)\n- User agent string for device/browser detection\n- Referrer header for traffic source analysis\n- UTM parameters (utm_source, utm_medium, utm_campaign, utm_term, utm_content)\n- Session identification for anonymous user tracking\n\n**Privacy Considerations:**\n- IP addresses are processed for geographic insights only\n- No personally identifiable information is stored\n- Complies with privacy regulations and best practices",
        "operationId": "TrackClick",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL that was clicked.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Click event was tracked successfully. Returns the complete click event data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickEvent"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid (e.g., invalid shortUrlId).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during click tracking.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/{shortUrlId}/analytics": {
      "get": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Retrieves comprehensive analytics for a specific short URL with optional date range filtering.",
        "description": "Sample Requests:\n            \n    GET /api/urls/tracking/123456789/analytics\n    GET /api/urls/tracking/123456789/analytics?startDate=2024-01-01T00:00:00Z\n    GET /api/urls/tracking/123456789/analytics?startDate=2024-01-01T00:00:00Z&endDate=2024-12-31T23:59:59Z\n\nThis endpoint provides comprehensive analytics insights including:\n\n**Core Metrics:**\n- Total click count for the specified period\n- Daily click trends (when date range is specified)\n\n**Geographic Analytics:**\n- Clicks breakdown by country\n- Geographic distribution insights\n\n**Device Analytics:**\n- Clicks by device type (desktop, mobile, tablet)\n- Browser and operating system statistics\n\n**Traffic Source Analytics:**\n- Traffic source breakdown (direct, social, search, referral)\n- Referrer domain analysis\n- UTM campaign performance\n\n**Time-Based Analytics:**\n- Daily click patterns (when date range is provided)\n- Trend analysis over time\n\nPerfect for creating dashboards, generating reports, and understanding user engagement patterns.",
        "operationId": "GetClickAnalytics",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL to get analytics for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Optional. The start date for analytics filtering (inclusive). If not provided, includes all historical data.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Optional. The end date for analytics filtering (inclusive). If not provided, includes data up to the current date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view analytics for this URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns comprehensive analytics data for the short URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickAnalytics"
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid date format, start date after end date).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/{shortUrlId}/real-time": {
      "get": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Retrieves real-time analytics for a specific short URL covering the last 24 hours.",
        "description": "Sample Request:\n            \n    GET /api/urls/tracking/123456789/real-time\n\nThis endpoint provides live analytics insights for monitoring immediate URL performance.\nIt automatically analyzes data from the last 24 hours to show:\n\n**Real-Time Insights:**\n- Recent click activity and trends\n- Geographic distribution of recent clicks\n- Device and browser usage patterns\n- Traffic source analysis for recent visitors\n- Hourly click distribution\n\n**Use Cases:**\n- Live monitoring during campaigns\n- Real-time performance dashboards\n- Immediate feedback on marketing efforts\n- Quick health checks for active URLs\n- Social media campaign monitoring\n\n**Performance Optimized:**\n- Fixed 24-hour window for consistent response times\n- Efficient queries for real-time data requirements\n- Suitable for frequent polling and live updates\n\nPerfect for real-time dashboards and monitoring active campaigns.",
        "operationId": "GetRealTimeAnalytics",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL to get real-time analytics for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view real-time analytics for this URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns real-time analytics data for the last 24 hours.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickAnalytics"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/{shortUrlId}/recent-clicks": {
      "get": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Retrieves the most recent click events for a specific short URL.",
        "description": "Sample Requests:\n            \n    GET /api/urls/tracking/123456789/recent-clicks\n    GET /api/urls/tracking/123456789/recent-clicks?count=20\n    GET /api/urls/tracking/123456789/recent-clicks?count=50\n\nThis endpoint provides immediate visibility into recent user activity and engagement.\nEach click event contains detailed information including:\n\n**Click Event Details:**\n- Timestamp of the click (UTC)\n- Geographic location (country, city)\n- Device information (browser, OS, device type)\n- Traffic source and referrer information\n- UTM campaign parameters\n- Session and user agent details\n\n**Use Cases:**\n- Monitoring recent activity and engagement\n- Debugging and troubleshooting click issues\n- Understanding user behavior patterns\n- Real-time activity feeds and notifications\n- Quality assurance for tracking implementation\n\n**Performance Considerations:**\n- Results are ordered by most recent clicks first\n- Limited to 100 items maximum for performance\n- Efficient queries for quick response times\n- Suitable for frequent polling and live updates\n\nPerfect for activity monitoring and real-time user engagement insights.",
        "operationId": "GetRecentClicks",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL to get recent clicks for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of recent clicks to retrieve. Default is 10, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view click details for this URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of recent click events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClickEvent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The count parameter is invalid (e.g., negative value or exceeds maximum limit).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/{shortUrlId}/click-history": {
      "get": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Retrieves paginated click history for a specific short URL.",
        "description": "Sample Requests:\n            \n    GET /api/urls/tracking/123456789/click-history\n    GET /api/urls/tracking/123456789/click-history?pageNumber=2\n    GET /api/urls/tracking/123456789/click-history?pageNumber=1&pageSize=25\n    GET /api/urls/tracking/123456789/click-history?pageNumber=3&pageSize=100\n\nThis endpoint provides comprehensive access to all historical click data with efficient pagination.\nThe response includes both the click events and pagination metadata:\n\n**Response Structure:**\n```json\n{\n  \"items\": [...], // Array of ClickEvent objects\n  \"totalCount\": 1250, // Total number of clicks\n  \"pageNumber\": 1, // Current page number\n  \"pageSize\": 50, // Items per page\n  \"totalPages\": 25, // Total number of pages\n  \"hasNextPage\": true, // Whether next page exists\n  \"hasPreviousPage\": false // Whether previous page exists\n}\n```\n\n**Use Cases:**\n- Historical data analysis and reporting\n- Detailed audit trails and compliance\n- Data export and backup operations\n- Comprehensive analytics and insights\n- User activity investigation and debugging\n\n**Performance Optimized:**\n- Efficient pagination to handle large datasets\n- Ordered by click timestamp (most recent first)\n- Optimized queries for fast response times\n- Memory-efficient processing for large result sets\n\nPerfect for comprehensive data analysis and historical reporting.",
        "operationId": "GetClickHistory",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL to get click history for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view click history for this URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated click history with metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickEventPaginatedResult"
                }
              }
            }
          },
          "400": {
            "description": "The pagination parameters are invalid (e.g., invalid page numbers or page size).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/urls/tracking/cleanup": {
      "delete": {
        "tags": [
          "ClickTracking"
        ],
        "summary": "Performs cleanup of old click tracking data based on a retention period.",
        "description": "Sample Requests:\n            \n        DELETE /api/urls/tracking/cleanup?retentionDays=365\n        DELETE /api/urls/tracking/cleanup?retentionDays=180\n        DELETE /api/urls/tracking/cleanup?retentionDays=90\n            \n            \n\n\n**⚠️ WARNING: This operation permanently deletes old click data and cannot be undone.**\n\nThis endpoint performs system-wide cleanup of historical click tracking data to:\n- **Comply with Data Retention Policies**: Meet regulatory requirements for data retention\n- **Optimize Database Performance**: Remove old data to improve query performance\n- **Manage Storage Costs**: Reduce database storage requirements\n- **Maintain System Health**: Prevent database bloat from excessive historical data\n\n**Administrative Operation:**\nThis is a system-level maintenance operation that affects click data across all URLs and users.\nOnly users with appropriate administrative permissions should have access to this endpoint.\n\n**Best Practices:**\n- Run during low-traffic periods to minimize system impact\n- Consider backing up data before cleanup if needed for compliance\n- Monitor the number of deleted records to ensure expected behavior\n- Schedule regular cleanup operations based on your retention policies\n\n**Common Retention Periods:**\n- **GDPR Compliance**: Typically 12-24 months\n- **Analytics Needs**: 6-18 months for trend analysis\n- **Storage Optimization**: 3-12 months depending on volume\n- **Audit Requirements**: Varies by industry and regulations",
        "operationId": "CleanupOldClicks",
        "parameters": [
          {
            "name": "retentionDays",
            "in": "query",
            "description": "The number of days to retain click data. Data older than this will be permanently deleted. Must be a positive value.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to perform system cleanup operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Cleanup completed successfully. Returns the number of deleted click events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "The retentionDays parameter is invalid (e.g., negative or zero value).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during cleanup processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves all organizations with pagination support.",
        "description": "Sample Request:\n            \n     GET /api/organizations?page=1&pageSize=10",
        "operationId": "GetAllOrganizations",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number (default: 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page (default: 50, max: 100).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Creates a new organization.",
        "description": "Sample Request:\n            \n     POST /api/organizations\n     {\n        \"name\": \"Tech Corp\",\n        \"description\": \"A technology company\",\n        \"website\": \"https://techcorp.com\",\n        \"logoUrl\": \"https://techcorp.com/logo.png\",\n        \"memberLimit\": 100,\n        \"ownerId\": \"550e8400-e29b-41d4-a716-446655440000\"\n     }",
        "operationId": "CreateOrganization",
        "requestBody": {
          "description": "The organization data to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to create organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Organization created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Owner user not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Organization with the same name already exists for the same owner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{organizationId}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves an organization by its unique identifier.",
        "description": "Sample Request:\n            \n     GET /api/organizations/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetOrganizationById",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the organization details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/search": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Searches organizations by name with pagination support.",
        "description": "Sample Request:\n            \n     GET /api/organizations/search?searchTerm=tech&page=1&pageSize=10",
        "operationId": "SearchOrganizations",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The search term to filter organizations by name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number (default: 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page (default: 50, max: 100).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of organizations matching the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/user/{ownerId}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Retrieves all organizations owned by a specific user.",
        "description": "Sample Request:\n            \n     GET /api/organizations/user/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetUserOrganizations",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "The unique identifier of the owner.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user's organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates an existing organization.",
        "description": "Sample Request:\n            \n     PUT /api/organizations/550e8400-e29b-41d4-a716-446655440000\n     {\n        \"name\": \"Updated Tech Corp\",\n        \"description\": \"An updated technology company\",\n        \"website\": \"https://updatedtechcorp.com\",\n        \"logoUrl\": \"https://updatedtechcorp.com/logo.png\",\n        \"memberLimit\": 150,\n        \"isActive\": true,\n        \"isSubscribed\": true\n     }",
        "operationId": "UpdateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated organization data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationDto"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Organization updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "The Owner is already the owner of this organization's updated name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes an organization. Only the owner can delete the organization.",
        "description": "Sample Request:\n            \n     DELETE /api/organizations/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "DeleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete the organization or is not the owner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Organization deleted successfully."
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}/activate": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Activates an organization.",
        "description": "Sample Request:\n            \n     POST /api/organizations/550e8400-e29b-41d4-a716-446655440000/activate",
        "operationId": "ActivateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization to activate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to activate organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Organization activated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found or already activated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}/deactivate": {
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Deactivates an organization.",
        "description": "Sample Request:\n            \n     POST /api/organizations/550e8400-e29b-41d4-a716-446655440000/deactivate",
        "operationId": "DeactivateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization to deactivate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to deactivate organizations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Organization deactivated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found or already deactivated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}/transfer-ownership": {
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Transfers ownership of an organization from the current owner to a new owner.",
        "description": "Sample Request:\n            \n     POST /api/organizations/550e8400-e29b-41d4-a716-446655440000/transfer-ownership\n     {\n        \"newOwnerId\": \"660f9511-f3ac-52e5-b827-557766551111\"\n     }",
        "operationId": "TransferOrgOwnership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The transfer ownership data containing the new owner ID.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TransferOwnershipRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to transfer ownership or is not the current owner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Ownership transferred successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or new owner is not a member of the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{id}/access/{userId}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Checks if a user has access to an organization (i.e., is a member).",
        "description": "Sample Request:\n            \n     GET /api/organizations/550e8400-e29b-41d4-a716-446655440000/access/660f9511-f3ac-52e5-b827-557766551111",
        "operationId": "CheckUserOrganizationAccess",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to check access for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check organization access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the access status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/organization/{organizationId}": {
      "get": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Retrieves all invitations for a specific organization with pagination support.",
        "description": "Sample Request:\n            \n     GET /api/organization-invitations/organization/550e8400-e29b-41d4-a716-446655440000?page=1&pageSize=10",
        "operationId": "GetOrganizationInvitations",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number (default: 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page (default: 10, max: 100).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organization invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of organization invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationInvitationDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Creates a new invitation for a user to join an organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-invitations/organization/550e8400-e29b-41d4-a716-446655440000\n     {\n        \"email\": \"user@example.com\",\n        \"invitedBy\": \"660f9511-f3ac-52e5-b827-557766551111\"\n     }",
        "operationId": "CreateInvitation",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The invitation data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMemberDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMemberDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMemberDto"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to create invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Invitation created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitationDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or organization has reached the member limit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User already has a pending invitation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/{Id}": {
      "get": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Retrieves an invitation by its token.",
        "description": "Sample Request:\n            \n     GET /api/organization-invitations/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetInvitationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The invitation token ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the invitation details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvitationDto"
                }
              }
            }
          },
          "404": {
            "description": "Invitation with the specified token was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/validate": {
      "get": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Validates an invitation token to check if it's valid and not expired.",
        "description": "Sample Request:\n            \n     GET /api/organization-invitations/validate?token=QCqPym5vuxi185cq1viT9DlvR4fV9P0ZvptE1qC7Pkf2FdFnNznFhWqYwzmOIYEU",
        "operationId": "ValidateInvitationToken",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The invitation token to validate.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to validate invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the validation status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/accept": {
      "post": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Accepts an invitation to join an organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-invitations/accept?token=QCqPym5vuxi185cq1viT9DlvR4fV9P0ZvptE1qC7Pkf2FdFnNznFhWqYwzmOIYEU",
        "operationId": "AcceptInvitation",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The invitation token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to accept invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Invitation accepted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired invitation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/reject": {
      "post": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Rejects an invitation to join an organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-invitations/reject?token=QCqPym5vuxi185cq1viT9DlvR4fV9P0ZvptE1qC7Pkf2FdFnNznFhWqYwzmOIYEU",
        "operationId": "RejectInvitation",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The invitation token.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to reject invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Invitation rejected successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired invitation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/{id}": {
      "delete": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Cancels an invitation. Only the user who created the invitation can cancel it.",
        "description": "Sample Request:\n            \n     DELETE /api/organization-invitations/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "CancelInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to cancel.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to cancel the invitation or is not the inviter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Invitation canceled successfully."
          },
          "404": {
            "description": "Invitation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/{id}/resend": {
      "post": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Resends an invitation by generating a new token and extending the expiration date.",
        "description": "Sample Request:\n            \n     POST /api/organization-invitations/550e8400-e29b-41d4-a716-446655440000/resend",
        "operationId": "ResendInvitation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the invitation to resend.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to resend the invitation or is not the inviter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Invitation resent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid invitation or invitation cannot be resent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-invitations/cleanup-expired": {
      "post": {
        "tags": [
          "OrganizationInvitation"
        ],
        "summary": "Cleans up expired invitations from the system (Admin operation).",
        "description": "Sample Request:\n            \n     POST /api/organization-invitations/cleanup-expired\n\nThis is typically an administrative operation that should be run periodically\nto remove expired invitations from the system.",
        "operationId": "CleanupExpiredInvitations",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to perform cleanup operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Cleanup completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members": {
      "get": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Retrieves all organization members with pagination support.",
        "description": "Sample Request:\n            \n     GET /api/organization-members?page=1&pageSize=10",
        "operationId": "GetAllOrganizationMembers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number (default: 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page (default: 10).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Adds a new member to an organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-members\n     {\n        \"organizationId\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"userId\": \"660f9511-f3ac-52e5-b827-557766551111\",\n        \"roleId\": \"Member\",\n        \"invitedBy\": \"770g0622-g4bd-63f6-c938-668877662222\"\n     }",
        "operationId": "ManageMembers",
        "requestBody": {
          "description": "The member data to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to add members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Member added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or organization has reached member limit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User is already a member of the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/organization/{organizationId}": {
      "get": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Retrieves all members of a specific organization.",
        "description": "Sample Request:\n            \n     GET /api/organization-members/organization/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetOrganizationMembers",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/user/{userId}": {
      "get": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Retrieves all organization memberships for a specific user.",
        "description": "Sample Request:\n            \n     GET /api/organization-members/user/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetUserMemberships",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user's organization memberships.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationMemberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/{organizationId}/user/{userId}": {
      "get": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Retrieves a specific membership for a user in an organization.",
        "description": "Sample Request:\n            \n     GET /api/organization-members/550e8400-e29b-41d4-a716-446655440000/user/660f9511-f3ac-52e5-b827-557766551111",
        "operationId": "GetMembership",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read organization members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the membership details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMemberDto"
                }
              }
            }
          },
          "404": {
            "description": "Membership is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Removes a member from an organization. Organization owners cannot be removed.",
        "description": "Sample Request:\n            \n     DELETE /api/organization-members/550e8400-e29b-41d4-a716-446655440000/user/660f9511-f3ac-52e5-b827-557766551111",
        "operationId": "ViewUserMemberships",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to remove members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Member removed successfully."
          },
          "400": {
            "description": "Cannot remove an organization owner.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/{organizationId}/user/{userId}/role": {
      "put": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Updates the role of an organization member.",
        "description": "Sample Request:\n            \n     PUT /api/organization-members/550e8400-e29b-41d4-a716-446655440000/user/660f9511-f3ac-52e5-b827-557766551111/role\n     {\n        \"roleId\": \"SuperAdmin\"\n     }",
        "operationId": "UpdateMemberRole",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new role data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRoleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRoleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRoleRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update member roles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Role updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/{organizationId}/user/{userId}/permissions": {
      "put": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Updates the permissions of an organization member.",
        "description": "Sample Request:\n            \n     PUT /api/organization-members/550e8400-e29b-41d4-a716-446655440000/user/660f9511-f3ac-52e5-b827-557766551111/permissions\n     {\n        \"permissions\": \"ReadWrite\"\n     }",
        "operationId": "UpdateMemberPermissions",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new permissions data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberPermissionsRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update member permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Permissions updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-members/{organizationId}/user/{userId}/is-member": {
      "get": {
        "tags": [
          "OrganizationMember"
        ],
        "summary": "Checks if a user is a member of an organization.",
        "description": "Sample Request:\n            \n     GET /api/organization-members/550e8400-e29b-41d4-a716-446655440000/user/660f9511-f3ac-52e5-b827-557766551111/is-member",
        "operationId": "IsMember",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check membership status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the membership status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams/{id}": {
      "get": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Retrieves a team by its unique identifier.",
        "description": "Sample Request:\n            \n     GET /api/organization-teams/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetTeamById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the team details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTeamDto"
                }
              }
            }
          },
          "404": {
            "description": "The Team with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Updates an existing team's name and/or description.",
        "description": "Sample Request:\n            \n     PUT /api/organization-teams/550e8400-e29b-41d4-a716-446655440000\n     {\n        \"name\": \"Updated Development Team\",\n        \"description\": \"Updated team description\"\n     }",
        "operationId": "UpdateTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the team to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated team data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Team updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Team with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Deletes a team.",
        "description": "Sample Request:\n            \n     DELETE /api/organization-teams/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "DeleteTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the team to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Team deleted successfully."
          },
          "404": {
            "description": "Team with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams/organization/{organizationId}": {
      "get": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Retrieves all teams within a specific organization.",
        "description": "Sample Request:\n            \n     GET /api/organization-teams/organization/550e8400-e29b-41d4-a716-446655440000",
        "operationId": "GetOrganizationTeams",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of teams.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationTeamDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams/{teamId}/members": {
      "get": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Retrieves all members of a specific team.",
        "description": "Sample Request:\n            \n     GET /api/organization-teams/550e8400-e29b-41d4-a716-446655440000/members",
        "operationId": "GetTeamMembers",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The unique identifier of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read team members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of team members.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationTeamMemberDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Adds a member to a team.",
        "description": "Sample Request:\n            \n     POST /api/organization-teams/550e8400-e29b-41d4-a716-446655440000/members\n     {\n        \"memberId\": \"660f9511-f3ac-52e5-b827-557766551111\"\n     }",
        "operationId": "AddMemberToTeam",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The unique identifier of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The member data to add to the team.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMemberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMemberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMemberRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to add team members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Member added to team successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Member is already a member of this team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams": {
      "post": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Creates a new team within an organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-teams\n     {\n        \"organizationId\": \"550e8400-e29b-41d4-a716-446655440000\",\n        \"teamManagerId\": \"660f9511-f3ac-52e5-b827-557766551111\",\n        \"name\": \"Development Team\",\n        \"description\": \"Team responsible for software development\"\n     }",
        "operationId": "CreateTeam",
        "requestBody": {
          "description": "The team data to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to create teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Team created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationTeamDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or team manager is not a member of the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Team name already exists in the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams/{teamId}/members/{memberId}": {
      "delete": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Removes a member from a team.",
        "description": "Sample Request:\n            \n     DELETE /api/organization-teams/550e8400-e29b-41d4-a716-446655440000/members/660f9511-f3ac-52e5-b827-557766551111",
        "operationId": "RemoveMemberFromTeam",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The unique identifier of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "The unique identifier of the member to remove.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to remove team members.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Member removed from team successfully."
          },
          "404": {
            "description": "Team member not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-teams/{teamId}/manager": {
      "put": {
        "tags": [
          "OrganizationTeam"
        ],
        "summary": "Changes the manager of a team.",
        "description": "Sample Request:\n            \n     PUT /api/organization-teams/550e8400-e29b-41d4-a716-446655440000/manager\n     {\n        \"newManagerId\": \"660f9511-f3ac-52e5-b827-557766551111\"\n     }",
        "operationId": "ChangeTeamManager",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The unique identifier of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new manager data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTeamManagerRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTeamManagerRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTeamManagerRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to change team manager.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Team manager changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or new manager is not a member of the organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/stats": {
      "get": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Retrieves usage statistics for a specific organization.",
        "description": "Sample Request:\n            \n     GET /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/stats",
        "operationId": "GetOrganizationUsageStats",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the organization usage statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUsageDto"
                }
              }
            }
          },
          "404": {
            "description": "If the organization usage record is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/track/link": {
      "post": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Tracks a link creation event for the specified organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/track/link",
        "operationId": "TrackOrganizationLinkCreation",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if link creation was successfully tracked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/track/qrcode": {
      "post": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Tracks a QR code creation event for the specified organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/track/qrcode",
        "operationId": "TrackOrganizationQrCodeCreation",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if QR code creation was successfully tracked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/can-create-links": {
      "get": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Checks if the organization can create more links within their monthly limit.",
        "description": "Sample Request:\n            \n     GET /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/can-create-links",
        "operationId": "CanOrganizationCreateMoreLinks",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the organization can create more links.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/can-create-qrcodes": {
      "get": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Checks if the organization can create more QR codes within their monthly limit.",
        "description": "Sample Request:\n            \n     GET /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/can-create-qrcodes",
        "operationId": "CanOrganizationCreateMoreQrCodes",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the organization can create more QR codes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/{organizationId}/reset-usage": {
      "post": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Resets the monthly usage statistics for a specific organization.",
        "description": "Sample Request:\n            \n     POST /api/organization-usage/550e8400-e29b-41d4-a716-446655440000/reset-usage",
        "operationId": "ResetOrganizationMonthlyUsage",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique ID of the organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the monthly usage was successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization-usage/reset-all-usage": {
      "post": {
        "tags": [
          "OrganizationUsage"
        ],
        "summary": "Resets the monthly usage statistics for all organizations.\nThis is typically used for scheduled monthly maintenance tasks.",
        "description": "Sample Request:\n            \n     POST /api/organization-usage/reset-all-usage",
        "operationId": "ResetAllOrganizationsMonthlyUsage",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the count of organizations that had their usage reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "If an internal server error occurs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/profile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Retrieves the current user's profile information.",
        "operationId": "GetProfile",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to view their own profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved the user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "404": {
            "description": "User profile not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Profile"
        ],
        "summary": "Performs a soft delete on a user, marking them as deleted without permanently removing the record.",
        "description": "\nThe user will be immediately logged out from all devices and applications, and will not be able to\n                    authenticate using any previously issued tokens.",
        "operationId": "RequestAccountDeletion",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to delete their account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Account deletion request was successfully submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "User account not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Account deletion request already pending or an account cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred."
          }
        }
      }
    },
    "/api/profile/quota-status": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Retrieves the current user's monthly quota status and usage statistics.",
        "operationId": "GetMonthlyQuotaStatus",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to view usage statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved the quota status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quota information isn't found for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/profile/update": {
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Updates the current user's profile information.",
        "operationId": "UpdateProfile",
        "requestBody": {
          "description": "The profile update request containing the fields to be modified.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserProfileRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User lacks permission to update their profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Profile was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The request contains invalid data or validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User profile not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "A conflict occurred (e.g., email already exists)."
          }
        }
      }
    },
    "/api/users/{userId}/security/status": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Retrieves the current security status of the specified user account.",
        "description": "This endpoint is used by administrators or internal systems to assess the current security state of a user account.\nIt provides information such as whether the account is locked, the number of failed login attempts,\nthe reason for lockout, and how long it remains until the account is automatically unlocked (if applicable).",
        "operationId": "GetUserSecurityStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to retrieve security information for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The user's security status was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSecurityStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid due to incorrect user ID format or parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No user or security record was found for the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/security/failed-attempts": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Records a failed login attempt for the specified user.",
        "description": "This endpoint is typically called by the authentication system when a user provides incorrect credentials.\nThe system will track the number of failed attempts and may trigger account locking\nif a configured threshold is exceeded.",
        "operationId": "RecordFailedLoginAttempt",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user who had a failed login attempt.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Caller is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Caller lacks permission to record security events.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The failed login attempt was successfully recorded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format or request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User or user security records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/security/reset-failed-attempts": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Resets the failed login attempt counter for the specified user.",
        "description": "This endpoint is typically called after a successful login or by an administrator to clear\na user’s failed login history.",
        "operationId": "ResetFailedLoginAttempts",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user whose failed attempt counter should be reset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Caller is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Caller lacks permission to manage user security.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "The failed login attempt counter was successfully reset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User or user security records were not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/security/is-locked": {
      "get": {
        "tags": [
          "Security"
        ],
        "summary": "Checks whether the specified user account is currently locked.",
        "description": "This endpoint allows checking if a user account is currently locked due to security policies,\nfailed login attempts, or administrative actions.",
        "operationId": "IsUserLocked",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Caller is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Caller lacks permission to view user security status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved the user's lock status.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/security/lock": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Locks the specified user account until the given expiration date.",
        "description": "\nThis endpoint allows administrators to manually lock user accounts for security purposes,\n                    such as suspected compromise, policy violations, or ongoing investigations.\n\n<strong>Important:</strong> When a user account is locked, all authentication tokens\n                    are revoked, and the user will be logged out from all devices.",
        "operationId": "LockUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to lock.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The lock request containing the duration and optional reason.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LockUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LockUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Caller is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Caller lacks permission to lock user accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User account was successfully locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters or user ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User account is already locked."
          }
        }
      }
    },
    "/api/users/{userId}/security/unlock": {
      "put": {
        "tags": [
          "Security"
        ],
        "summary": "Unlocks the specified user account, removing any lock restrictions.",
        "description": "This endpoint allows administrators to manually unlock user accounts that were previously locked\ndue to security policies, failed login attempts, or administrative actions. Unlocking allows the\nuser to authenticate normally, but they must get new tokens.",
        "operationId": "UnlockUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to unlock.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Caller is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Caller lacks permission to unlock user accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User account was successfully unlocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user ID format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "User account is not currently locked."
          }
        }
      }
    },
    "/api/short-urls/{id}": {
      "get": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Retrieves a short URL by its unique identifier.",
        "description": "Sample Request:\n            \n     GET /api/short-urls/123456789",
        "operationId": "GetShortUrlById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the short URL.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the short URL details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShortUrlDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Updates an existing short URL by its unique identifier.",
        "description": "Sample request (all fields are optional for updates):\n\n    PUT /api/short-urls/123456789\n    {\n        \"originalUrl\": \"https://www.updated-example.com\",\n        \"isActive\": true,\n        \"trackingEnabled\": false,\n        \"clickLimit\": 50,\n        \"title\": \"Updated Title\"\n    }",
        "operationId": "UpdateShortUrl",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the short URL to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the updated URL details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortUrlRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortUrlRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortUrlRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Short URL was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShortUrlDto"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Update would create a conflict (e.g., duplicate short code).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Deletes a short URL by its unique identifier.",
        "operationId": "DeleteShortUrlById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the short URL to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Short URL was deleted successfully."
          },
          "400": {
            "description": "The request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/code/{shortCode}": {
      "get": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Retrieves a short URL by its short code.",
        "description": "Sample request:\n\n    GET /api/short-urls/code/my-short-code",
        "operationId": "GetShortUrlByCode",
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "description": "The short code of the URL to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to read URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the short URL details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShortUrlDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified short code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Deletes a short URL by its short code.",
        "operationId": "DeleteShortUrlByCode",
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "description": "The short code of the URL to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Short URL was deleted successfully."
          },
          "400": {
            "description": "The request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified short code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls": {
      "post": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Creates a new short URL.",
        "description": "\n<strong>Access:</strong> [AllowAnonymous] This endpoint is accessible to everyone (anonymous clients, logged-in users, and organization members). \n            The service will handle permissions and feature availability based on the user's authentication status and role.\n            Sample request:\n            \n                POST /api/short-urls\n                {\n                    \"originalUrl\": \"https://www.example.com\",\n                    \"customShortCode\": \"my-custom-code\",\n                    \"clickLimit\": 100,\n                    \"trackingEnabled\": true,\n                    \"isPasswordProtected\": false,\n                    \"isPrivate\": false,\n                    \"expiresAt\": \"2024-12-31T23:59:59Z\",\n                    \"title\": \"Example Website\",\n                    \"description\": \"This is an example website\"\n                }",
        "operationId": "CreateShortUrl",
        "requestBody": {
          "description": "The request containing the URL details to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortUrlRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortUrlRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortUrlRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to create URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Short URL was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShortUrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "A short URL with the specified custom code already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/{id}/short-code": {
      "patch": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Updates the short code of an existing short URL.",
        "description": "This endpoint allows you to change only the short code of an existing URL.",
        "operationId": "UpdateShortCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the short URL.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The new short code to assign to the URL.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Short code was updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The new short code is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "A short URL with the new short code already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/code-exists": {
      "get": {
        "tags": [
          "ShortUrl"
        ],
        "summary": "Checks whether the shortCode is existing",
        "description": "This endpoint allows anonymous access to facilitate URL creation processes.\nReturns true when the shortCode is already taken.\nSample Request:\n            \n    GET /api/short-urls/code-exists?shortCode=xUfMQv",
        "operationId": "IsShortCodeExists",
        "parameters": [
          {
            "name": "shortCode",
            "in": "query",
            "description": "The shortCode to check if exists.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The provided shortCode is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during the check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if shortCode exists; otherwise false."
          }
        }
      }
    },
    "/api/short-urls/analytics/total-count": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves the total count of short URLs in the system.",
        "description": "Sample Requests:\n            \n    GET /api/short-urls/analytics/total-count\n    GET /api/short-urls/analytics/total-count?activeOnly=true\n    GET /api/short-urls/analytics/total-count?activeOnly=false\n            \nThis endpoint provides system-wide statistics for monitoring and dashboard purposes.\nWhen activeOnly is true, it excludes deactivated, expired, and deleted URLs from the count.\nUseful for generating reports and understanding system usage patterns.",
        "operationId": "GetTotalUrlCount",
        "parameters": [
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Optional. If true, returns only active URLs. If false or not provided, returns all URLs including inactive ones. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view system analytics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the total count of short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/analytics/{shortUrlId}/total-clicks": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves the total number of clicks for a specific short URL.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/analytics/123456789/total-clicks\n\nThis endpoint provides click analytics for individual short URLs.\nThe click count includes all successful redirections and excludes failed attempts or blocked access.\nUseful for monitoring individual URL performance and engagement metrics.",
        "operationId": "GetTotalClicksForUrl",
        "parameters": [
          {
            "name": "shortUrlId",
            "in": "path",
            "description": "The unique identifier of the short URL to get click statistics for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view analytics for this URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the total click count for the short URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "Short URL with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/analytics/most-popular": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves the most popular short URLs based on click count, optionally filtered by timeframe and user.",
        "description": "Sample Requests:\n            \n    GET /api/short-urls/analytics/most-popular\n    GET /api/short-urls/analytics/most-popular?topCount=5\n    GET /api/short-urls/analytics/most-popular?topCount=20&timeframeDays=30\n    GET /api/short-urls/analytics/most-popular?userId=12345678-1234-1234-1234-123456789012\n    GET /api/short-urls/analytics/most-popular?topCount=5&timeframeDays=7&userId=12345678-1234-1234-1234-123456789012\n\nThis endpoint provides insights into the most engaging content by analyzing click patterns.\nResults are ordered by total clicks in descending order (most popular first).\nThe timeframeDays parameter allows for trend analysis over specific periods.\nUseful for content performance analysis, trending content identification, and user engagement metrics.",
        "operationId": "GetMostPopularUrls",
        "parameters": [
          {
            "name": "topCount",
            "in": "query",
            "description": "The number of top URLs to retrieve. Default is 10, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "timeframeDays",
            "in": "query",
            "description": "Optional. Filter results to URLs clicked within the last specified number of days. If not provided, considers all-time data.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Optional. Filter results to URLs created by the specified user. If not provided, includes URLs from all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view popularity analytics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of most popular short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid topCount range, negative timeframeDays, invalid userId format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/analytics/user/{userId}/summary": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves a comprehensive analytics summary for a specific user.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/analytics/user/12345678-1234-1234-1234-123456789012/summary\n\nThis endpoint provides a comprehensive overview of user activity and engagement metrics.\nThe summary typically includes metrics such as:\n- Total number of URLs created by the user\n- Total clicks across all user's URLs\n- Average clicks per URL\n- Most popular URLs\n- Recent activity trends\n\nUseful for user dashboards, performance reports, and individual user analytics.",
        "operationId": "GetUserAnalyticsSummary",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to get analytics for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view analytics for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the user analytics summary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAnalyticsSummary"
                }
              }
            }
          },
          "400": {
            "description": "The userId parameter is invalid (e.g., invalid GUID format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/analytics/organization/{organizationId}/summary": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves comprehensive analytics summary for a specific organization.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/analytics/organization/87654321-4321-4321-4321-210987654321/summary\n\nThis endpoint provides a comprehensive overview of organization-wide activity and engagement metrics.\nThe summary typically includes metrics such as:\n- Total number of URLs created by organization members\n- Total clicks across all organization URLs\n- Top performing members and their contribution\n- Most popular organization URLs\n- Usage trends and patterns\n- Team performance metrics\n\nUseful for organization dashboards, team performance analysis, and administrative reporting.\nOnly users with appropriate organization-level permissions can access this data.",
        "operationId": "GetOrganizationAnalyticsSummary",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization to get analytics for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view analytics for the specified organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the organization analytics summary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAnalyticsSummary"
                }
              }
            }
          },
          "400": {
            "description": "The organizationId parameter is invalid (e.g., invalid GUID format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/analytics/approaching-limit": {
      "get": {
        "tags": [
          "ShortUrlAnalytics"
        ],
        "summary": "Retrieves short URLs that are approaching their click limits with pagination support.",
        "description": "Sample Requests:\n            \n    GET /api/short-urls/analytics/approaching-limit\n    GET /api/short-urls/analytics/approaching-limit?warningThreshold=0.9\n    GET /api/short-urls/analytics/approaching-limit?warningThreshold=0.85&pageNumber=1&pageSize=25\n\nThis endpoint identifies URLs that are close to reaching their configured click limits.\nFor example, if a URL has a click limit of 100 and warningThreshold is 0.8, it will be included\nwhen it reaches 80 or more clicks.\n\nUseful for:\n- Proactive monitoring and alerting\n- Preventing service disruptions due to exceeded limits  \n- Capacity planning and limit management\n- Automated notifications to URL owners\n\nOnly URLs with defined click limits are considered in this analysis.",
        "operationId": "GetUrlsApproachingLimit",
        "parameters": [
          {
            "name": "warningThreshold",
            "in": "query",
            "description": "The threshold percentage (as decimal) at which URLs should be considered approaching their limit. Default is 0.8 (80%). Must be between 0.1 and 1.0.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 0.8
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view limit analytics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of URLs approaching their click limits.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., warningThreshold out of range, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/create": {
      "post": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Creates multiple short URLs in a single batch operation.",
        "description": "\n<strong>Access:</strong> The service will handle permissions and feature availability based on the user's authentication status and role.\n            Sample request:\n            \n                POST /api/short-urls/bulk/create\n                {\n                  \"requests\": [\n                    {\n                      \"originalUrl\": \"https://www.example1.com\",\n                      \"customShortCode\": \"example1\",\n                      \"clickLimit\": 100,\n                      \"trackingEnabled\": true,\n                      \"title\": \"Example 1\"\n                    },\n                    {\n                      \"originalUrl\": \"https://www.example2.com\",\n                      \"customShortCode\": \"example2\",\n                      \"clickLimit\": 100,\n                      \"trackingEnabled\": true,\n                      \"title\": \"Example 2\"\n                    }\n                }\n            \n            \n<strong>Performance Benefits:</strong>\n            - Reduced network overhead compared to individual requests\n            - Optimized database operations with batch processing\n            - Transactional consistency across multiple URL creations\n            <strong>Conflict Handling:</strong>\n            - URLs with conflicting custom codes are skipped and reported\n            - Successful URLs are still created even if some fail\n            - Detailed conflict messages help identify and resolve issues",
        "operationId": "BulkCreateShortUrls",
        "requestBody": {
          "description": "A collection of short URL creation requests to process in bulk.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateShortUrlsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateShortUrlsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateShortUrlsRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to create URLs in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Bulk creation completed. Check response for detailed results including any conflicts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkCreateShortUrlResult"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or malformed (e.g., empty request collection, invalid URL formats).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during bulk processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/update-expiration": {
      "put": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Updates the expiration date for multiple short URLs in a single batch operation.",
        "description": "Sample request:\n\n    PUT /api/short-urls/bulk/update-expiration\n    {\n        \"ids\": [123456789, 987654321, 456789123],\n        \"newExpirationDate\": \"2024-12-31T23:59:59Z\"\n    }\n\nThis endpoint allows efficient management of URL expiration dates across multiple URLs.\nSetting newExpirationDate to null removes the expiration (makes URLs permanent).\n\n**Use Cases:**\n- Extending expiration for campaign URLs\n- Batch management of temporary URLs\n- Emergency expiration updates\n- Removing expiration from URLs that should be permanent\n\nOnly URLs that the authenticated user has permission to modify will be updated.",
        "operationId": "BulkUpdateExpiration",
        "requestBody": {
          "description": "The bulk update request containing URL IDs and the new expiration date.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateExpirationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateExpirationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateExpirationRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update URLs in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Bulk expiration update completed. Check response for detailed results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid (e.g., empty ID collection, invalid date format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during bulk processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/delete": {
      "delete": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Deletes multiple short URLs in a single batch operation.",
        "description": "Sample request:\n\n    DELETE /api/short-urls/bulk/delete\n    {\n        \"ids\": [123456789, 987654321, 456789123]\n    }\n\n**⚠️ WARNING: This operation permanently deletes URLs and cannot be undone.**\n\nThis endpoint efficiently removes multiple URLs in a single operation.\nAll associated analytics data and click history will also be deleted.\n\n**Use Cases:**\n- Cleanup of expired or obsolete URLs\n- Bulk removal of test URLs\n- Administrative maintenance operations\n- User account cleanup\n\nOnly URLs that the authenticated user has permission to delete will be removed.",
        "operationId": "BulkDeleteShortUrls",
        "requestBody": {
          "description": "The bulk delete request containing the IDs of URLs to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete URLs in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Bulk deletion completed. Check response for detailed results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid (e.g., empty ID collection).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during bulk processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/delete-expired": {
      "delete": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Deletes all expired short URLs from the system.",
        "description": "Sample request:\n\n    DELETE /api/short-urls/bulk/delete-expired\n\n**⚠️ WARNING: This operation permanently deletes all expired URLs and cannot be undone.**\n\nThis endpoint performs system-wide cleanup by removing URLs that have passed their expiration date.\nIt's typically used for:\n- Automated maintenance jobs\n- Database cleanup operations\n- Storage optimization\n- Compliance with data retention policies\n\n**Administrative Operation:**\nThis is a system-level operation that affects URLs across all users and organizations.\nOnly users with appropriate administrative permissions should have access to this endpoint.",
        "operationId": "DeleteExpiredShortUrls",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to perform system-wide cleanup operations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Expired URLs cleanup completed. Check response for the number of deleted URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during cleanup processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/activate": {
      "put": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Activates multiple short URLs in a single batch operation.",
        "description": "Sample request:\n\n    PUT /api/short-urls/bulk/activate\n    {\n        \"ids\": [123456789, 987654321, 456789123]\n    }\n\nThis endpoint enables multiple URLs that were previously deactivated.\nActivated URLs become accessible again and can be used for redirections.\n\n**Use Cases:**\n- Re-enabling URLs after maintenance\n- Bulk activation of seasonal campaigns\n- Recovery from accidental deactivation\n- Scheduled activation of prepared URLs\n\nOnly URLs that the authenticated user has permission to modify will be activated.\nURLs that are already active will be included in the success count without any changes.",
        "operationId": "BulkActivateShortUrls",
        "requestBody": {
          "description": "The bulk activation request containing the IDs of URLs to activate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to activate URLs in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Bulk activation completed. Check response for detailed results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid (e.g., empty ID collection).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during bulk processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/bulk/deactivate": {
      "put": {
        "tags": [
          "ShortUrlBulkOperations"
        ],
        "summary": "Deactivate multiple short URLs in a single batch operation.",
        "description": "Sample request:\n\n    PUT /api/short-urls/bulk/deactivate\n    {\n        \"ids\": [123456789, 987654321, 456789123]\n    }\n\nThis endpoint enables multiple URLs that were previously deactivated.\nDeactivate URLs become accessible again and can be used for redirections.\n\n**Use Cases:**\n- Re-enabling URLs after maintenance\n- Bulk deactivation of seasonal campaigns\n\nOnly URLs that the authenticated user has permission to modify will be deactivated.\nURLs that are already not active will be included in the success count without any changes.",
        "operationId": "BulkDeactivateShortUrls",
        "requestBody": {
          "description": "The bulk deactivated request containing the IDs of URLs to deactivate.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BasicBulkRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to deactivate URLs in bulk.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Bulk deactivation completed. Check response for detailed results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid (e.g., empty ID collection).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during bulk processing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/user/{userId}": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves short URLs created by a specific user with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/user/12345678-1234-1234-1234-123456789012?pageNumber=1&pageSize=20\n\nThis endpoint returns all short URLs created by the specified user, including both public and private URLs\nthat the authenticated user has permission to view.",
        "operationId": "GetShortUrlsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user whose URLs to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view URLs for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of user's short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid userId format, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/organization/{organizationId}": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves short URLs created by users within a specific organization with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/organization/87654321-4321-4321-4321-210987654321?pageNumber=1&pageSize=25\n\nThis endpoint returns all short URLs created by members of the specified organization.\nOnly users with appropriate permissions can access organization-level data.",
        "operationId": "GetShortUrlsByOrganizationId",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The unique identifier of the organization whose URLs to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view URLs for the specified organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of organization's short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid organizationId format, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Organization with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/anonymous": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves anonymous short URLs created within a specific date range with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/anonymous?startDate=2024-01-01T00:00:00Z&endDate=2024-12-31T23:59:59Z&pageNumber=1&pageSize=30\n\nThis endpoint returns short URLs that were created by anonymous users (not logged in) within the specified date range.\nUseful for analytics and monitoring anonymous usage patterns.",
        "operationId": "GetAnonymousShortUrlsByDateRange",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date for the date range filter (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for the date range filter (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view anonymous URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of anonymous short URLs within the date range.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid date format, start date after end date, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/expired": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves expired short URLs with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/expired?pageNumber=1&pageSize=20\n\nThis endpoint returns all short URLs that have passed their expiration date and are no longer active.\nUseful for cleanup operations and expired URL management.",
        "operationId": "GetExpiredShortUrls",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view expired URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of expired short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/private/{userId}": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves private short URLs for a specific user with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/private/12345678-1234-1234-1234-123456789012?pageNumber=1&pageSize=15\n\nThis endpoint returns only private short URLs created by the specified user.\nPrivate URLs are not visible to other users and require special permissions to access.",
        "operationId": "GetPrivateShortUrlsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user whose private URLs to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, the maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view private URLs for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of user's private short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid userId format, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/date-range": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves short URLs created within a specific date range with pagination support.",
        "description": "Sample Request:\n            \n    GET /api/short-urls/query/date-range?startDate=2024-01-01T00:00:00Z&endDate=2024-12-31T23:59:59Z&pageNumber=1&pageSize=40\n\nThis endpoint returns all short URLs (both anonymous and authenticated users) created within the specified date range.\nUseful for analytics, reporting, and monitoring URL creation patterns over time.",
        "operationId": "GetShortUrlsByDateRange",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date for the date range filter (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date for the date range filter (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view URLs within the date range.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of short URLs within the date range.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid date format, start date after end date, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/duplicates": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves duplicate short URLs grouped by original URL.",
        "description": "Sample Requests:\n            \n    GET /api/short-urls/query/duplicates\n    GET /api/short-urls/query/duplicates?userId=12345678-1234-1234-1234-123456789012\n    GET /api/short-urls/query/duplicates?organizationId=87654321-4321-4321-4321-210987654321\n    GET /api/short-urls/query/duplicates?userId=12345678-1234-1234-1234-123456789012&organizationId=87654321-4321-4321-4321-210987654321\n\nThis endpoint identifies and returns groups of short URLs that point to the same original URL.\nUseful for cleanup operations, optimization, and identifying redundant short URLs.\nIf neither userId nor organizationId is provided, it searches for duplicates across the entire system (admin-level operation).",
        "operationId": "GetDuplicateShortUrls",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "Optional. The unique identifier of the user to filter duplicates for. If not provided, searches across all users.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Optional. The unique identifier of the organization to filter duplicates for. If not provided, search across all organizations.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view duplicates for the specified scope.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of duplicate URL groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DuplicatesUrlsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., invalid GUID formats).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/short-urls/query/unused": {
      "get": {
        "tags": [
          "ShortUrlQuery"
        ],
        "summary": "Retrieves unused short URLs (URLs that have never been clicked) with pagination support.",
        "description": "Sample Requests:\n            \n    GET /api/short-urls/query/unused\n    GET /api/short-urls/query/unused?olderThanDays=30&pageNumber=1&pageSize=25\n    GET /api/short-urls/query/unused?pageNumber=2&pageSize=50\n\nThis endpoint returns short URLs that have never been accessed (click count is 0).\nThe olderThanDays parameter helps identify URLs that have been unused for a specific period,\nwhich is useful for cleanup operations and identifying potentially obsolete URLs.\nIf olderThanDays is not specified, all unused URLs are returned regardless of their creation date.",
        "operationId": "GetUnusedShortUrls",
        "parameters": [
          {
            "name": "olderThanDays",
            "in": "query",
            "description": "Optional. Filter to include only URLs that are older than the specified number of days. If not provided, returns all unused URLs regardless of age.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to retrieve (starting from 1). Default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page. Default is 50, maximum is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view unused URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the paginated list of unused short URLs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShortUrlDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request parameters are invalid (e.g., negative olderThanDays value, invalid pagination parameters).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/{shortCode}": {
      "get": {
        "tags": [
          "ShortUrlRedirect"
        ],
        "summary": "Resolves a short code to its original URL or initiates the password-protected redirect flow.",
        "parameters": [
          {
            "name": "shortCode",
            "in": "path",
            "description": "The unique code associated with the shortened URL.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "301": {
            "description": "Permanent redirect to the original URL."
          },
          "302": {
            "description": "Redirect to the password entry page for protected URLs."
          },
          "404": {
            "description": "No URL found for the specified short code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/url-redirect/password-page": {
      "get": {
        "tags": [
          "ShortUrlRedirect"
        ],
        "summary": "Renders the password entry page for a protected short URL.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "A short-lived redirect token (JWT) issued by M:Shortly.API.Controllers.ShortUrlRedirectController.RedirectToUrl(System.String,System.Threading.CancellationToken).\n\nThis token grants temporary access to the password entry form.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "in": "query",
            "description": "Optional error message displayed to the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password form displayed successfully."
          },
          "403": {
            "description": "Token is invalid, expired, or missing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/url-redirect/verify": {
      "post": {
        "tags": [
          "ShortUrlRedirect"
        ],
        "summary": "Verifies the submitted password for a protected short URL and redirects on success.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The short-lived redirect token identifying the short code in question."
                  },
                  "password": {
                    "type": "string",
                    "description": "The user-entered password."
                  }
                }
              },
              "encoding": {
                "token": {
                  "style": "form"
                },
                "password": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password incorrect — form re-rendered with error."
          },
          "301": {
            "description": "Password correct — redirected to the original URL."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid or expired redirect token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/current-user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves the authenticated user.",
        "operationId": "GetCurrentUser",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the user information successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/by-Id/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user by their unique identifier.",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the user information successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/by-email": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user by their email address.",
        "operationId": "GetUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address of the user to retrieve. Must be a valid email format.",
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the user information successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "The provided email address is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified email was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/by-username": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a user by their username.",
        "operationId": "GetUserByUsername",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username of the user to retrieve.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the user information successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified username was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The provided username is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new user in the system.",
        "operationId": "CreateNewUser",
        "requestBody": {
          "description": "The user creation request containing all required user information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to add users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "A user with the same email or username already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during user creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "User created successfully. Returns the created user information."
          }
        }
      }
    },
    "/api/user/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates an existing user's information.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The user update request containing the modified user information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to update users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User updated successfully. Returns the updated user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "The request data is invalid or the user ID is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "The update would create a conflict (e.g., duplicate email/username).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during the update.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/delete/{userId}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Performs a soft delete on a user, marking them as deleted without permanently removing the record.",
        "description": "This operation performs a soft delete, meaning the user record is marked as deleted\nbut remains in the database for audit purposes. The current user's ID is automatically\nrecorded as the one who performed the deletion.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to delete users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "User deleted successfully. No content returned."
          },
          "400": {
            "description": "The provided user ID is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during deletion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/activate/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Activates a user account, enabling them to access the system.",
        "operationId": "ActivateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to activate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to control user activation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User activated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The provided user ID is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during activation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/deactivate/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Deactivates a user account, preventing them from accessing the system.",
        "operationId": "DeactivateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to deactivate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to control user activation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "User deactivated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The provided user ID is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during deactivation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/exists/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Checks whether a user exists in the system by their unique identifier.",
        "operationId": "IsUserExists",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user to check.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check user availability.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the user exists, false otherwise.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The provided user ID is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during the check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/email-availability": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Checks whether an email address is available for registration (not already in use).",
        "description": "This endpoint allows anonymous access to facilitate user registration processes.\nReturns true when the email is ready to use (not taken by another user).",
        "operationId": "IsEmailAvailable",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address to check for availability. Must be a valid email format.",
            "schema": {
              "type": "string",
              "format": "email"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check email availability.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the email is available, false if already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The provided email address is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during the check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/username-availability": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Checks whether a username is available for registration (not already in use).",
        "description": "This endpoint allows anonymous access to facilitate user registration processes.\nReturns true when the username is ready to use (not taken by another user).",
        "operationId": "IsUsernameAvailable",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username to check for availability.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check username availability.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns true if the username is available, false if already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "The provided username is invalid or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred during the check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Retrieves comprehensive usage statistics for a specific user.",
        "operationId": "GetUserUsageStats",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user whose usage statistics are to be retrieved.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view usage statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the usage statistics for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUsageDto"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/track-link": {
      "post": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Tracks the creation of a new link for a specific user by incrementing their monthly link count.",
        "description": "",
        "operationId": "TrackLinkCreation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user creating the link.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to track link creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Link creation was tracked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUsageDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/track-qr": {
      "post": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Tracks the creation of a new QR code for a specific user by incrementing their monthly QR code count.",
        "operationId": "TrackQrCodeCreation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user creating the QR code.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to track QR code creation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "QR code creation was tracked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/can-create-links": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Checks if the user can create more links this month based on their subscription plan limits.",
        "operationId": "CanCreateMoreLinks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view link limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns whether the user can create more links.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/can-create-qr": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Checks if the user can create more QR codes this month based on their subscription plan limits.",
        "operationId": "CanCreateMoreQrCodes",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view QR code limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns whether the user can create more QR codes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/remaining-links": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Gets the remaining number of links the user can create this month.",
        "operationId": "GetRemainingLinks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view link limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the remaining link count.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/remaining-qr": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Gets the remaining number of QR codes the user can create this month.",
        "operationId": "GetRemainingQrCodes",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to view QR code limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns the remaining QR code count.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/has-exceeded": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Checks whether the user has exceeded their monthly limits for links or QR codes.",
        "operationId": "HasExceededLimits",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to check links or QR limits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Returns whether the limits have been exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "No usage record was found for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/{userId}/reset": {
      "put": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Resets the monthly usage statistics (links and QR codes) for a specific user.",
        "operationId": "ResetMonthlyUsage",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The unique identifier of the user whose usage will be reset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to reset monthly usage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Reset completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/reset-all": {
      "put": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Resets monthly usage statistics for all eligible users.",
        "operationId": "ResetMonthlyUsageForAll",
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to reset the monthly usage of all users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Reset completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/usage/report": {
      "get": {
        "tags": [
          "UserUsage"
        ],
        "summary": "Generates a usage report for all users whose reset date falls within the specified date range.",
        "operationId": "GetUsageReport",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "The start date of the reporting period (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end date of the reporting period (inclusive).",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to usage reports.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Report generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserUsageDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionResponseDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddTeamMemberRequest": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "tokens": {
            "$ref": "#/components/schemas/TokenResponse"
          },
          "success": {
            "type": "boolean"
          },
          "requiresEmailConfirmation": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BasicBulkRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasicUserSearchResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSearchResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkCreateShortUrlResult": {
        "type": "object",
        "properties": {
          "totalRequests": {
            "type": "integer",
            "format": "int32"
          },
          "processedCount": {
            "type": "integer",
            "format": "int32"
          },
          "successCount": {
            "type": "integer",
            "format": "int32"
          },
          "failureCount": {
            "type": "integer",
            "format": "int32"
          },
          "conflictCount": {
            "type": "integer",
            "format": "int32"
          },
          "conflictMessages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkCreateShortUrlsRequest": {
        "type": "object",
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateShortUrlRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkOperationResult": {
        "type": "object",
        "properties": {
          "totalProcessed": {
            "type": "integer",
            "format": "int32"
          },
          "successCount": {
            "type": "integer",
            "format": "int32"
          },
          "failureCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BulkUpdateExpirationRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "newExpirationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeEmailRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "confirmPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeTeamManagerRequest": {
        "type": "object",
        "properties": {
          "newManagerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ClickAnalytics": {
        "type": "object",
        "properties": {
          "shortUrlId": {
            "type": "integer",
            "format": "int64"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int64"
          },
          "uniqueClicks": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "clicksByCountry": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "clicksByDeviceType": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "clicksByTrafficSource": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "clicksByBrowser": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "clicksByOperatingSystem": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "dailyClicks": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "hourlyClicks": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "topReferrers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ClickEvent": {
        "required": [
          "browser",
          "city",
          "country",
          "device",
          "ipAddress",
          "operatingSystem",
          "sessionId",
          "userAgent"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "shortUrlId": {
            "type": "integer",
            "format": "int64"
          },
          "clickedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ipAddress": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "userAgent": {
            "type": "string",
            "nullable": true
          },
          "referrer": {
            "type": "string",
            "nullable": true
          },
          "utmSource": {
            "type": "string",
            "nullable": true
          },
          "utmMedium": {
            "type": "string",
            "nullable": true
          },
          "utmCampaign": {
            "type": "string",
            "nullable": true
          },
          "utmTerm": {
            "type": "string",
            "nullable": true
          },
          "utmContent": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "browser": {
            "type": "string",
            "nullable": true
          },
          "operatingSystem": {
            "type": "string",
            "nullable": true
          },
          "device": {
            "type": "string",
            "nullable": true
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "referrerDomain": {
            "type": "string",
            "nullable": true
          },
          "trafficSource": {
            "type": "string",
            "nullable": true
          },
          "shortUrl": {
            "$ref": "#/components/schemas/ShortUrl"
          }
        },
        "additionalProperties": false
      },
      "ClickEventPaginatedResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickEvent"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CompleteUserSearchResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompleteUserSearchResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompleteUserSearchResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlan": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "isActive": {
            "type": "boolean"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "userProfile": {
            "$ref": "#/components/schemas/UserProfileResponse"
          },
          "userSecurityDto": {
            "$ref": "#/components/schemas/UserSecurityDto"
          },
          "userUsageDto": {
            "$ref": "#/components/schemas/UserUsageDto"
          }
        },
        "additionalProperties": false
      },
      "ConfirmEmailChangeRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateMemberRequest": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "invitedBy": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "memberLimit": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateShortUrlRequest": {
        "required": [
          "originalUrl"
        ],
        "type": "object",
        "properties": {
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "customShortCode": {
            "type": "string",
            "nullable": true
          },
          "clickLimit": {
            "type": "integer",
            "format": "int32"
          },
          "trackingEnabled": {
            "type": "boolean"
          },
          "isPasswordProtected": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateShortUrlResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "shortUrl": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateTeamRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "teamManagerId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DuplicatesUrlsResponse": {
        "type": "object",
        "properties": {
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "duplicates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortUrlDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailChangeResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExceptionResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "exceptionType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "details": {
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ForceUpdateUserRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileResponse"
          },
          "security": {
            "$ref": "#/components/schemas/UserSecurityDto"
          },
          "usage": {
            "$ref": "#/components/schemas/UserUsageDto"
          }
        },
        "additionalProperties": false
      },
      "ForceUpdateUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfileResponse"
          },
          "security": {
            "$ref": "#/components/schemas/UserSecurityDto"
          },
          "usage": {
            "$ref": "#/components/schemas/UserUsageDto"
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InviteMemberDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "customPermissions": {
            "$ref": "#/components/schemas/enPermissions"
          },
          "invitedBy": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "LockUserRequest": {
        "type": "object",
        "properties": {
          "lockUntil": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockUserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time"
          },
          "tokensRevoked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "emailOrUsername": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Organization": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "memberLimit": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "isSubscribed": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "isDeleted": {
            "type": "boolean",
            "readOnly": true
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "subscriptionPlan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "organizationUsage": {
            "$ref": "#/components/schemas/OrganizationUsage"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationTeam"
            },
            "nullable": true
          },
          "shortUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortUrl"
            },
            "nullable": true
          },
          "auditLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAuditLog"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationAnalyticsSummary": {
        "type": "object",
        "properties": {
          "totalUrls": {
            "type": "integer",
            "format": "int32"
          },
          "activeUrls": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int64"
          },
          "memberCount": {
            "type": "integer",
            "format": "int32"
          },
          "averageClicksPerUrl": {
            "type": "number",
            "format": "double"
          },
          "inactiveUrls": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageUrlsPerMember": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationAuditLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "actorId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "targetEntity": {
            "type": "string",
            "nullable": true
          },
          "targetId": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "actor": {
            "$ref": "#/components/schemas/OrganizationMember"
          }
        },
        "additionalProperties": false
      },
      "OrganizationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "memberLimit": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "isSubscribed": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationInvitationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "invitedUserEmail": {
            "type": "string",
            "nullable": true
          },
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "customPermissions": {
            "$ref": "#/components/schemas/enPermissions"
          },
          "invitedBy": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/enInvitationStatus"
          },
          "registeredAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrganizationMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "customPermissions": {
            "$ref": "#/components/schemas/enPermissions"
          },
          "isActive": {
            "type": "boolean"
          },
          "invitedBy": {
            "type": "string",
            "format": "uuid"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "createdShortUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortUrl"
            },
            "nullable": true
          },
          "joinedTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationTeamMember"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationMemberDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "customPermissions": {
            "$ref": "#/components/schemas/enPermissions"
          },
          "isActive": {
            "type": "boolean"
          },
          "invitedBy": {
            "type": "string",
            "format": "uuid"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrganizationTeam": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "teamManagerId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "teamManager": {
            "$ref": "#/components/schemas/OrganizationMember"
          },
          "teamMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationTeamMember"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationTeamDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "teamManagerId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrganizationTeamMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "memberId": {
            "type": "string",
            "format": "uuid"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          },
          "team": {
            "$ref": "#/components/schemas/OrganizationTeam"
          },
          "member": {
            "$ref": "#/components/schemas/OrganizationMember"
          }
        },
        "additionalProperties": false
      },
      "OrganizationTeamMemberDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "memberId": {
            "type": "string",
            "format": "uuid"
          },
          "joinedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrganizationUsage": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "monthlyLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyResetDate": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "additionalProperties": false
      },
      "OrganizationUsageDto": {
        "type": "object",
        "properties": {
          "monthlyLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyResetDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PasswordOperationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "QuotaStatusResponse": {
        "type": "object",
        "properties": {
          "remainingLinksThisMonth": {
            "type": "integer",
            "format": "int32"
          },
          "remainingQrCodesThisMonth": {
            "type": "integer",
            "format": "int32"
          },
          "daysUntilQuotaReset": {
            "type": "integer",
            "format": "int32"
          },
          "maxLinksPerMonth": {
            "type": "integer",
            "format": "int32"
          },
          "maxQrCodesPerMonth": {
            "type": "integer",
            "format": "int32"
          },
          "usedLinksThisMonth": {
            "type": "integer",
            "format": "int32"
          },
          "usedQrCodesThisMonth": {
            "type": "integer",
            "format": "int32"
          },
          "subscriptionPlan": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "quotaResetDate": {
            "type": "string",
            "format": "date-time"
          },
          "linksUsagePercentage": {
            "type": "number",
            "format": "double"
          },
          "qrCodesUsagePercentage": {
            "type": "number",
            "format": "double"
          },
          "isLinksQuotaExhausted": {
            "type": "boolean"
          },
          "isQrCodesQuotaExhausted": {
            "type": "boolean"
          },
          "isNearLinksQuotaLimit": {
            "type": "boolean"
          },
          "isNearQrCodesQuotaLimit": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RefreshToken": {
        "required": [
          "tokenHash"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "tokenHash": {
            "type": "string",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "isRevoked": {
            "type": "boolean"
          },
          "revokedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "isExpired": {
            "type": "boolean",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RefreshTokenRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "confirmPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/enUserRole"
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "defaultPermissions": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SendEmailVerificationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendEmailVerificationResponse": {
        "type": "object",
        "properties": {
          "emailSent": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShortUrl": {
        "required": [
          "originalUrl"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "shortCode": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "$ref": "#/components/schemas/enShortUrlOwnerType"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdByMemberId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "anonymousSessionId": {
            "type": "string",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "trackingEnabled": {
            "type": "boolean"
          },
          "clickLimit": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int32"
          },
          "isPasswordProtected": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "createdBy": {
            "$ref": "#/components/schemas/OrganizationMember"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "clickEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShortUrlDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "shortCode": {
            "type": "string",
            "nullable": true
          },
          "ownerType": {
            "$ref": "#/components/schemas/enShortUrlOwnerType"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdByMemberId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "trackingEnabled": {
            "type": "boolean"
          },
          "clickLimit": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int32"
          },
          "isPasswordProtected": {
            "type": "boolean"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionPlan": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "maxQrCodesPerMonth": {
            "type": "integer",
            "format": "int32"
          },
          "maxLinksPerMonth": {
            "type": "integer",
            "format": "int32"
          },
          "clickDataRetentionDays": {
            "type": "integer",
            "format": "int32"
          },
          "linkAnalysis": {
            "type": "boolean"
          },
          "bulkCreation": {
            "type": "boolean"
          },
          "linkProtection": {
            "type": "boolean"
          },
          "customShortCode": {
            "type": "boolean"
          },
          "campaignTracking": {
            "type": "boolean"
          },
          "geoDeviceTracking": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          },
          "accessTokenExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "refreshTokenExpiry": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TransferOwnershipRequest": {
        "type": "object",
        "properties": {
          "newOwnerId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "UnlockUserResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "unlockedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UpdateMemberPermissionsRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/enPermissions"
          }
        },
        "additionalProperties": false
      },
      "UpdateMemberRoleRequest": {
        "type": "object",
        "properties": {
          "roleId": {
            "$ref": "#/components/schemas/enUserRole"
          }
        },
        "additionalProperties": false
      },
      "UpdateOrganizationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "nullable": true
          },
          "memberLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "isSubscribed": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateShortUrlRequest": {
        "type": "object",
        "properties": {
          "originalUrl": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "trackingEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "clickLimit": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isPasswordProtected": {
            "type": "boolean",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTeamRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "required": [
          "email",
          "passwordHash",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "subscriptionPlan": {
            "$ref": "#/components/schemas/SubscriptionPlan"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "userSecurity": {
            "$ref": "#/components/schemas/UserSecurity"
          },
          "userUsage": {
            "$ref": "#/components/schemas/UserUsage"
          },
          "ownedShortUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortUrl"
            },
            "nullable": true
          },
          "auditLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAuditLog"
            },
            "nullable": true
          },
          "refreshTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefreshToken"
            },
            "nullable": true
          },
          "organizationMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAnalyticsSummary": {
        "type": "object",
        "properties": {
          "totalUrls": {
            "type": "integer",
            "format": "int32"
          },
          "activeUrls": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int64"
          },
          "privateUrls": {
            "type": "integer",
            "format": "int32"
          },
          "passwordProtectedUrls": {
            "type": "integer",
            "format": "int32"
          },
          "expiredUrls": {
            "type": "integer",
            "format": "int32"
          },
          "inactiveUrls": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "averageClicksPerUrl": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "activeUrlPercentage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserAuditLog": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "action": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "ipAddress": {
            "type": "string",
            "nullable": true
          },
          "userAgent": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlanId": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfile": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserProfileResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserSearchResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "subscriptionPlan": {
            "$ref": "#/components/schemas/enSubscriptionPlan"
          },
          "isActive": {
            "type": "boolean"
          },
          "permissions": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "UserSecurity": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "failedLoginAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutReason": {
            "type": "string",
            "nullable": true
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "twoFactorSecret": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserSecurityDto": {
        "type": "object",
        "properties": {
          "failedLoginAttempts": {
            "type": "integer",
            "format": "int32"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "twoFactorSecret": {
            "type": "string",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserSecurityStatusResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "isLocked": {
            "type": "boolean"
          },
          "lockedUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockReason": {
            "type": "string",
            "nullable": true
          },
          "failedAttemptsCount": {
            "type": "integer",
            "format": "int32"
          },
          "daysUntilUnlock": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserUsage": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "monthlyLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyResetDate": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserUsageDto": {
        "type": "object",
        "properties": {
          "monthlyLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalLinksCreated": {
            "type": "integer",
            "format": "int32"
          },
          "totalQrCodesCreated": {
            "type": "integer",
            "format": "int32"
          },
          "monthlyResetDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ValidateResetTokenRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidateTokenResponse": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "enInvitationStatus": {
        "enum": [
          "Pending",
          "EmailSent",
          "Failure",
          "UserClicked",
          "Registered",
          "Rejected"
        ],
        "type": "string"
      },
      "enPermissions": {
        "enum": [
          "None",
          "CreateLink",
          "ReadOwnLinks",
          "UpdateOwnLinks",
          "DeleteOwnLinks",
          "ReadOrgLinks",
          "UpdateOrgLinks",
          "DeleteOrgLinks",
          "BulkCreateLinks",
          "BulkUpdateLinks",
          "BulkDeleteLinks",
          "CreateCustomAlias",
          "CreateBrandedLinks",
          "SetLinkExpiration",
          "SetPasswordProtection",
          "GenerateQrCodes",
          "ExportLinks",
          "ReadOwnAnalytics",
          "ReadTeamAnalytics",
          "ReadOrgAnalytics",
          "CreateCustomReports",
          "ExportAnalytics",
          "ViewRealTimeStats",
          "ViewHistoricalData",
          "ConfigureAnalytics",
          "ViewTeams",
          "CreateTeam",
          "UpdateTeam",
          "DeleteTeam",
          "ManageTeamMembers",
          "ViewTeamMembers",
          "AssignTeamRoles",
          "TransferTeamOwnership",
          "ViewOrganization",
          "UpdateOrganization",
          "DeleteOrganization",
          "ManageOrganization",
          "ManageOrgBilling",
          "ManageOrgMembers",
          "TransferOrgOwnership",
          "ViewInvitations",
          "CreateInvitations",
          "ManageInvitations",
          "ViewMembers",
          "RemoveMembers",
          "ManageOwnAccount",
          "BasicUser",
          "TeamMember",
          "TeamManager",
          "OrgAdmin",
          "OrgOwner",
          "ViewUsers",
          "ViewUserDetails",
          "ViewUrlsAnalytics",
          "ReadUrls",
          "CreateUser",
          "UpdateUser",
          "DeactivateUser",
          "ReactivateUser",
          "ResetUserPassword",
          "ManageUserAccessibility",
          "ManageUserUsage",
          "ManageOrgUsage",
          "ViewUserMemberships",
          "DeleteUser",
          "SuperAdmin",
          "CleanupSystemData",
          "SystemAdmin"
        ],
        "type": "string"
      },
      "enShortUrlOwnerType": {
        "enum": [
          "User",
          "Organization",
          "Anonymous"
        ],
        "type": "string"
      },
      "enSubscriptionPlan": {
        "enum": [
          "Free",
          "Starter",
          "Professional",
          "Enterprise"
        ],
        "type": "string"
      },
      "enUserRole": {
        "enum": [
          "Viewer",
          "Member",
          "TeamManager",
          "OrgAdmin",
          "OrgOwner",
          "SuperAdmin",
          "SystemAdmin"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
